diff --git a/hphp/hack/src/arena_collections/Cargo.toml b/hphp/hack/src/arena_collections/Cargo.toml
index a5b009f1d46..5f53f995d75 100644
--- a/hphp/hack/src/arena_collections/Cargo.toml
+++ b/hphp/hack/src/arena_collections/Cargo.toml
@@ -12,7 +12,7 @@ path = "lib.rs"
 arena_deserializer = { version = "0.0.0", path = "../utils/arena_deserializer" }
 arena_trait = { version = "0.0.0", path = "../arena_trait" }
 bumpalo = { version = "3.11.1", features = ["collections"] }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
 
 [dev-dependencies]
diff --git a/hphp/hack/src/decl/cargo/rust_decl_ffi/Cargo.toml b/hphp/hack/src/decl/cargo/rust_decl_ffi/Cargo.toml
index 8e2c2a13e78..1cf3749f1c8 100644
--- a/hphp/hack/src/decl/cargo/rust_decl_ffi/Cargo.toml
+++ b/hphp/hack/src/decl/cargo/rust_decl_ffi/Cargo.toml
@@ -16,9 +16,9 @@ ast_and_decl_parser = { version = "0.0.0", path = "../../../parser/cargo/ast_and
 bumpalo = { version = "3.11.1", features = ["collections"] }
 direct_decl_parser = { version = "0.0.0", path = "../../../parser/api/cargo/direct_decl_parser" }
 hh_hash = { version = "0.0.0", path = "../../../utils/hh_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_caml_builtins = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_caml_builtins = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../oxidized_by_ref" }
 parser_core_types = { version = "0.0.0", path = "../../../parser/cargo/core_types" }
diff --git a/hphp/hack/src/depgraph/cargo/dep/Cargo.toml b/hphp/hack/src/depgraph/cargo/dep/Cargo.toml
index 6b71adee93c..30c350dd900 100644
--- a/hphp/hack/src/depgraph/cargo/dep/Cargo.toml
+++ b/hphp/hack/src/depgraph/cargo/dep/Cargo.toml
@@ -11,5 +11,5 @@ crate-type = ["lib", "staticlib"]
 
 [dependencies]
 bytemuck = { version = "1.12.3", features = ["derive"] }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/deps/cargo/deps_rust/Cargo.toml b/hphp/hack/src/deps/cargo/deps_rust/Cargo.toml
index d151717c113..de5a7ce182a 100644
--- a/hphp/hack/src/deps/cargo/deps_rust/Cargo.toml
+++ b/hphp/hack/src/deps/cargo/deps_rust/Cargo.toml
@@ -14,8 +14,8 @@ dep_graph_delta = { version = "0.0.0", path = "../.." }
 depgraph_reader = { version = "0.0.0", path = "../../../depgraph/cargo/depgraph_reader" }
 hash = { version = "0.0.0", path = "../../../utils/hash" }
 hh_fanout_rust_ffi = { version = "0.0.0", path = "../hh_fanout_rust_ffi" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_custom = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_custom = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 parking_lot = { version = "0.11.2", features = ["send_guard"] }
 rpds = "0.11.0"
diff --git a/hphp/hack/src/deps/cargo/deps_rust_ffi/Cargo.toml b/hphp/hack/src/deps/cargo/deps_rust_ffi/Cargo.toml
index 6dbe81e1c96..8e99c5b0b1a 100644
--- a/hphp/hack/src/deps/cargo/deps_rust_ffi/Cargo.toml
+++ b/hphp/hack/src/deps/cargo/deps_rust_ffi/Cargo.toml
@@ -13,8 +13,8 @@ crate-type = ["lib", "staticlib"]
 dep = { version = "0.0.0", path = "../../../depgraph/cargo/dep" }
 deps_rust = { version = "0.0.0", path = "../deps_rust" }
 hash = { version = "0.0.0", path = "../../../utils/hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_custom = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_custom = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 rpds = "0.11.0"
 typing_deps_hash = { version = "0.0.0", path = "../typing_deps_hash" }
diff --git a/hphp/hack/src/deps/cargo/hh_fanout_rust_ffi/Cargo.toml b/hphp/hack/src/deps/cargo/hh_fanout_rust_ffi/Cargo.toml
index b1f4e5fb6d0..c1e7e2bc668 100644
--- a/hphp/hack/src/deps/cargo/hh_fanout_rust_ffi/Cargo.toml
+++ b/hphp/hack/src/deps/cargo/hh_fanout_rust_ffi/Cargo.toml
@@ -15,5 +15,5 @@ crate-type = ["lib", "staticlib"]
 dep = { version = "0.0.0", path = "../../../depgraph/cargo/dep" }
 hh24_types = { version = "0.0.0", path = "../../../utils/hh24_types" }
 hh_slog = { version = "0.0.0", path = "../../../utils/hh_slog/cargo/hh_slog" }
-ocamlrep_custom = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_custom = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/deps/rust/file_info/Cargo.toml b/hphp/hack/src/deps/rust/file_info/Cargo.toml
index e18d598acef..82e6f51a9f7 100644
--- a/hphp/hack/src/deps/rust/file_info/Cargo.toml
+++ b/hphp/hack/src/deps/rust/file_info/Cargo.toml
@@ -14,11 +14,13 @@ arena_trait = { version = "0.0.0", path = "../../../arena_trait" }
 eq_modulo_pos = { version = "0.0.0", path = "../../../utils/eq_modulo_pos" }
 naming_types = { version = "0.0.0", path = "../../../naming/rust/naming_types" }
 no_pos_hash = { version = "0.0.0", path = "../../../utils/no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../../../parser/cargo/core_types" }
 rc_pos = { version = "0.0.0", path = "../../../utils/rust/pos" }
 relative_path = { version = "0.0.0", path = "../../../utils/rust/relative_path" }
-rusqlite = { version = "0.28.0", features = ["backup", "blob", "column_decltype"] }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
 thiserror = "1.0.36"
 typing_deps_hash = { version = "0.0.0", path = "../../cargo/typing_deps_hash" }
+
+[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
+rusqlite = { version = "0.28.0", features = ["backup", "blob", "column_decltype"] }
\ No newline at end of file
diff --git a/hphp/hack/src/deps/rust/file_info_lib.rs b/hphp/hack/src/deps/rust/file_info_lib.rs
index 6092c509de9..9087d61ce4f 100644
--- a/hphp/hack/src/deps/rust/file_info_lib.rs
+++ b/hphp/hack/src/deps/rust/file_info_lib.rs
@@ -17,9 +17,13 @@ mod s_set {
 
 use naming_types::KindOfType;
 use relative_path::RelativePath;
+#[cfg(unix)]
 use rusqlite::types::FromSql;
+#[cfg(unix)]
 use rusqlite::types::FromSqlError;
+#[cfg(unix)]
 use rusqlite::types::FromSqlResult;
+#[cfg(unix)]
 use rusqlite::types::ValueRef;
 
 impl From<Mode> for parser_core_types::FileMode {
@@ -94,6 +98,7 @@ impl From<NameType> for typing_deps_hash::DepType {
     }
 }
 
+#[cfg(unix)]
 impl FromSql for NameType {
     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self> {
         match value {
@@ -117,6 +122,7 @@ impl FromSql for NameType {
     }
 }
 
+#[cfg(unix)]
 impl rusqlite::ToSql for NameType {
     fn to_sql(&self) -> rusqlite::Result<rusqlite::types::ToSqlOutput<'_>> {
         Ok(rusqlite::types::ToSqlOutput::from(*self as i64))
diff --git a/hphp/hack/src/elab/Cargo.toml b/hphp/hack/src/elab/Cargo.toml
index 1471f76558b..16c989ea07b 100644
--- a/hphp/hack/src/elab/Cargo.toml
+++ b/hphp/hack/src/elab/Cargo.toml
@@ -15,6 +15,6 @@ file_info = { version = "0.0.0", path = "../deps/rust/file_info" }
 hash = { version = "0.0.0", path = "../utils/hash" }
 itertools = "0.10.3"
 naming_special_names_rust = { version = "0.0.0", path = "../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../oxidized" }
 relative_path = { version = "0.0.0", path = "../utils/rust/relative_path" }
diff --git a/hphp/hack/src/facts/cargo/rust_facts_ffi/Cargo.toml b/hphp/hack/src/facts/cargo/rust_facts_ffi/Cargo.toml
index 675290b94d7..5937a7d2dc3 100644
--- a/hphp/hack/src/facts/cargo/rust_facts_ffi/Cargo.toml
+++ b/hphp/hack/src/facts/cargo/rust_facts_ffi/Cargo.toml
@@ -16,6 +16,6 @@ bumpalo = { version = "3.11.1", features = ["collections"] }
 direct_decl_parser = { version = "0.0.0", path = "../../../parser/api/cargo/direct_decl_parser" }
 facts_rust = { version = "0.0.0", path = "../facts_rust" }
 hhbc_string_utils = { version = "0.0.0", path = "../../../hackc/utils/cargo/hhbc_string_utils" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 relative_path = { version = "0.0.0", path = "../../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/generate_hhi/cargo/generate_hhi_lib/Cargo.toml b/hphp/hack/src/generate_hhi/cargo/generate_hhi_lib/Cargo.toml
index 505788024dd..1a565df8cf7 100644
--- a/hphp/hack/src/generate_hhi/cargo/generate_hhi_lib/Cargo.toml
+++ b/hphp/hack/src/generate_hhi/cargo/generate_hhi_lib/Cargo.toml
@@ -10,7 +10,7 @@ path = "../../generate_hhi_lib.rs"
 
 [dependencies]
 anyhow = "1.0.65"
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../../../parser/cargo/core_types" }
 positioned_parser = { version = "0.0.0", path = "../../../parser/api/cargo/positioned_parser" }
 relative_path = { version = "0.0.0", path = "../../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/hackc/Cargo.toml b/hphp/hack/src/hackc/Cargo.toml
index ab5e728d851..0eba9281370 100644
--- a/hphp/hack/src/hackc/Cargo.toml
+++ b/hphp/hack/src/hackc/Cargo.toml
@@ -43,7 +43,7 @@ log = { version = "0.4.17", features = ["kv_unstable", "kv_unstable_std"] }
 multifile_rust = { version = "0.0.0", path = "../utils/multifile" }
 naming_provider = { version = "0.0.0", path = "../hackrs/naming_provider/cargo/naming_provider" }
 naming_special_names_rust = { version = "0.0.0", path = "../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 options = { version = "0.0.0", path = "compile/cargo/options" }
 oxidized = { version = "0.0.0", path = "../oxidized" }
diff --git a/hphp/hack/src/hackc/compile/cargo/closure_convert/Cargo.toml b/hphp/hack/src/hackc/compile/cargo/closure_convert/Cargo.toml
index 62db4c9a114..2494d9aa123 100644
--- a/hphp/hack/src/hackc/compile/cargo/closure_convert/Cargo.toml
+++ b/hphp/hack/src/hackc/compile/cargo/closure_convert/Cargo.toml
@@ -19,7 +19,7 @@ hhbc = { version = "0.0.0", path = "../../../hhbc/cargo/hhbc" }
 hhbc_string_utils = { version = "0.0.0", path = "../../../utils/cargo/hhbc_string_utils" }
 itertools = "0.10.3"
 naming_special_names_rust = { version = "0.0.0", path = "../../../../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 options = { version = "0.0.0", path = "../options" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 stack_limit = { version = "0.0.0", path = "../../../../utils/stack_limit" }
diff --git a/hphp/hack/src/hackc/compile/cargo/compile/Cargo.toml b/hphp/hack/src/hackc/compile/cargo/compile/Cargo.toml
index 553263b2bd6..2ce9367c16b 100644
--- a/hphp/hack/src/hackc/compile/cargo/compile/Cargo.toml
+++ b/hphp/hack/src/hackc/compile/cargo/compile/Cargo.toml
@@ -24,7 +24,7 @@ error = { version = "0.0.0", path = "../../../error/cargo/error" }
 hhbc = { version = "0.0.0", path = "../../../hhbc/cargo/hhbc" }
 ir = { version = "0.0.0", path = "../../../ir" }
 ir_to_bc = { version = "0.0.0", path = "../../../ir/conversions/ir_to_bc" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 options = { version = "0.0.0", path = "../options" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../../../../parser/cargo/core_types" }
diff --git a/hphp/hack/src/hackc/compile/cargo/rewrite_program/Cargo.toml b/hphp/hack/src/hackc/compile/cargo/rewrite_program/Cargo.toml
index c257b599cda..ab368da9617 100644
--- a/hphp/hack/src/hackc/compile/cargo/rewrite_program/Cargo.toml
+++ b/hphp/hack/src/hackc/compile/cargo/rewrite_program/Cargo.toml
@@ -15,7 +15,7 @@ env = { version = "0.0.0", path = "../../../emitter/cargo/env" }
 error = { version = "0.0.0", path = "../../../error/cargo/error" }
 hack_macro = { version = "0.0.0", path = "../../../utils/cargo/hack_macro" }
 hhbc = { version = "0.0.0", path = "../../../hhbc/cargo/hhbc" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 relative_path = { version = "0.0.0", path = "../../../../utils/rust/relative_path" }
 rewrite_xml = { version = "0.0.0", path = "../rewrite_xml" }
diff --git a/hphp/hack/src/hackc/emitter/cargo/emit_unit/Cargo.toml b/hphp/hack/src/hackc/emitter/cargo/emit_unit/Cargo.toml
index d611dc3b46a..50e0bd78bff 100644
--- a/hphp/hack/src/hackc/emitter/cargo/emit_unit/Cargo.toml
+++ b/hphp/hack/src/hackc/emitter/cargo/emit_unit/Cargo.toml
@@ -32,7 +32,7 @@ itertools = "0.10.3"
 label_rewriter = { version = "0.0.0", path = "../label_rewriter" }
 lazy_static = "1.4"
 naming_special_names_rust = { version = "0.0.0", path = "../../../../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 options = { version = "0.0.0", path = "../../../compile/cargo/options" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 print_expr = { version = "0.0.0", path = "../../../print_expr" }
diff --git a/hphp/hack/src/hackc/emitter/cargo/env/Cargo.toml b/hphp/hack/src/hackc/emitter/cargo/env/Cargo.toml
index e14ff874b21..4d51344cd56 100644
--- a/hphp/hack/src/hackc/emitter/cargo/env/Cargo.toml
+++ b/hphp/hack/src/hackc/emitter/cargo/env/Cargo.toml
@@ -21,7 +21,7 @@ hhbc_string_utils = { version = "0.0.0", path = "../../../utils/cargo/hhbc_strin
 indexmap = { version = "1.9.2", features = ["arbitrary", "rayon", "serde-1"] }
 instruction_sequence = { version = "0.0.0", path = "../instruction_sequence" }
 naming_special_names_rust = { version = "0.0.0", path = "../../../../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 options = { version = "0.0.0", path = "../../../compile/cargo/options" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 print_expr = { version = "0.0.0", path = "../../../print_expr" }
diff --git a/hphp/hack/src/hackc/emitter/cargo/global_state/Cargo.toml b/hphp/hack/src/hackc/emitter/cargo/global_state/Cargo.toml
index 8785339d4f3..3a242eac91b 100644
--- a/hphp/hack/src/hackc/emitter/cargo/global_state/Cargo.toml
+++ b/hphp/hack/src/hackc/emitter/cargo/global_state/Cargo.toml
@@ -10,6 +10,6 @@ path = "../../global_state.rs"
 
 [dependencies]
 hhbc = { version = "0.0.0", path = "../../../hhbc/cargo/hhbc" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 unique_id_builder = { version = "0.0.0", path = "../../../utils/cargo/unique_id_builder" }
diff --git a/hphp/hack/src/hackc/ffi_bridge/Cargo.toml b/hphp/hack/src/hackc/ffi_bridge/Cargo.toml
index 52de2f1bb8a..414e6496a04 100644
--- a/hphp/hack/src/hackc/ffi_bridge/Cargo.toml
+++ b/hphp/hack/src/hackc/ffi_bridge/Cargo.toml
@@ -23,7 +23,7 @@ hhbc = { version = "0.0.0", path = "../hhbc/cargo/hhbc" }
 itertools = "0.10.3"
 libc = "0.2.139"
 no_pos_hash = { version = "0.0.0", path = "../../utils/no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 options = { version = "0.0.0", path = "../compile/cargo/options" }
 parser_core_types = { version = "0.0.0", path = "../../parser/cargo/core_types" }
 relative_path = { version = "0.0.0", path = "../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/hackc/utils/cargo/hack_macro/Cargo.toml b/hphp/hack/src/hackc/utils/cargo/hack_macro/Cargo.toml
index c625ca8677b..e9f48335f60 100644
--- a/hphp/hack/src/hackc/utils/cargo/hack_macro/Cargo.toml
+++ b/hphp/hack/src/hackc/utils/cargo/hack_macro/Cargo.toml
@@ -13,7 +13,7 @@ proc-macro = true
 
 [dependencies]
 aast_parser = { version = "0.0.0", path = "../../../../parser/cargo/aast_parser" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../../../../parser/cargo/core_types" }
diff --git a/hphp/hack/src/hackrs/cargo/decl_folded_class_ffi/Cargo.toml b/hphp/hack/src/hackrs/cargo/decl_folded_class_ffi/Cargo.toml
index fc43567710a..2bd102af3b5 100644
--- a/hphp/hack/src/hackrs/cargo/decl_folded_class_ffi/Cargo.toml
+++ b/hphp/hack/src/hackrs/cargo/decl_folded_class_ffi/Cargo.toml
@@ -21,8 +21,8 @@ hackrs_test_utils = { version = "0.0.0", path = "../../hackrs_test_utils/cargo/h
 hhi = { version = "0.0.0", path = "../../../hhi/rust" }
 indicatif = { version = "0.17.1", features = ["improved_unicode", "rayon", "tokio"] }
 jwalk = "0.6"
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../oxidized_by_ref" }
 pos = { version = "0.0.0", path = "../../pos/cargo/pos" }
diff --git a/hphp/hack/src/hackrs/hackrs_test/cargo/hackrs_test/Cargo.toml b/hphp/hack/src/hackrs/hackrs_test/cargo/hackrs_test/Cargo.toml
index 65ae254bb5e..c077a2fd1c1 100644
--- a/hphp/hack/src/hackrs/hackrs_test/cargo/hackrs_test/Cargo.toml
+++ b/hphp/hack/src/hackrs/hackrs_test/cargo/hackrs_test/Cargo.toml
@@ -20,7 +20,7 @@ hh24_test = { version = "0.0.0", path = "../../../../facebook/utils/cargo/hh24_t
 itertools = "0.10.3"
 maplit = "1.0"
 naming_provider = { version = "0.0.0", path = "../../../naming_provider/cargo/naming_provider" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 pos = { version = "0.0.0", path = "../../../pos/cargo/pos" }
 relative_path = { version = "0.0.0", path = "../../../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/hackrs/pos/cargo/pos/Cargo.toml b/hphp/hack/src/hackrs/pos/cargo/pos/Cargo.toml
index 6ef24a6ef89..f9b05a46384 100644
--- a/hphp/hack/src/hackrs/pos/cargo/pos/Cargo.toml
+++ b/hphp/hack/src/hackrs/pos/cargo/pos/Cargo.toml
@@ -17,7 +17,7 @@ hh24_types = { version = "0.0.0", path = "../../../../utils/hh24_types" }
 im = { version = "15.1", features = ["rayon", "serde"] }
 indexmap = { version = "1.9.2", features = ["arbitrary", "rayon", "serde-1"] }
 intern = { version = "0.1.0", path = "../../../../utils/intern" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../../oxidized_by_ref" }
 relative_path = { version = "0.0.0", path = "../../../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/hackrs/ty/cargo/ty/Cargo.toml b/hphp/hack/src/hackrs/ty/cargo/ty/Cargo.toml
index e54a1db0237..3563e02ca3d 100644
--- a/hphp/hack/src/hackrs/ty/cargo/ty/Cargo.toml
+++ b/hphp/hack/src/hackrs/ty/cargo/ty/Cargo.toml
@@ -15,7 +15,7 @@ eq_modulo_pos = { version = "0.0.0", path = "../../../../utils/eq_modulo_pos" }
 hash = { version = "0.0.0", path = "../../../../utils/hash" }
 hcons = { version = "0.0.0", path = "../../../../hcons" }
 im = { version = "15.1", features = ["rayon", "serde"] }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../../oxidized_by_ref" }
diff --git a/hphp/hack/src/hackrs/utils/cargo/utils/Cargo.toml b/hphp/hack/src/hackrs/utils/cargo/utils/Cargo.toml
index 697f88f060d..b062d8e40e6 100644
--- a/hphp/hack/src/hackrs/utils/cargo/utils/Cargo.toml
+++ b/hphp/hack/src/hackrs/utils/cargo/utils/Cargo.toml
@@ -10,7 +10,7 @@ path = "../../utils.rs"
 
 [dependencies]
 eq_modulo_pos = { version = "0.0.0", path = "../../../../utils/eq_modulo_pos" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 pos = { version = "0.0.0", path = "../../../pos/cargo/pos" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/hcons/Cargo.toml b/hphp/hack/src/hcons/Cargo.toml
index 4efd49e6852..5ba82f3a9b0 100644
--- a/hphp/hack/src/hcons/Cargo.toml
+++ b/hphp/hack/src/hcons/Cargo.toml
@@ -11,6 +11,6 @@ path = "lib.rs"
 [dependencies]
 dashmap = { version = "5.4", features = ["raw-api", "rayon", "serde"] }
 fnv = "1.0"
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/hh_fanout/cargo/hh_fanout_build_rust/Cargo.toml b/hphp/hack/src/hh_fanout/cargo/hh_fanout_build_rust/Cargo.toml
index d0d59d715fd..810391d2037 100644
--- a/hphp/hack/src/hh_fanout/cargo/hh_fanout_build_rust/Cargo.toml
+++ b/hphp/hack/src/hh_fanout/cargo/hh_fanout_build_rust/Cargo.toml
@@ -15,4 +15,4 @@ crate-type = ["lib", "staticlib"]
 delta_log = { version = "0.0.0", path = "../../../utils/rust/delta_log" }
 env_logger = "0.7"
 hh_fanout_build = { version = "0.0.0", path = "../hh_fanout_build" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_is_subgraph_rust/Cargo.toml b/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_is_subgraph_rust/Cargo.toml
index d82c76f489f..f5e1f03a3a3 100644
--- a/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_is_subgraph_rust/Cargo.toml
+++ b/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_is_subgraph_rust/Cargo.toml
@@ -15,4 +15,4 @@ crate-type = ["lib", "staticlib"]
 depgraph_reader = { version = "0.0.0", path = "../../../depgraph/cargo/depgraph_reader" }
 env_logger = "0.7"
 log = { version = "0.4.17", features = ["kv_unstable", "kv_unstable_std"] }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_stats_rust/Cargo.toml b/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_stats_rust/Cargo.toml
index 3509be8c515..8954aa30567 100644
--- a/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_stats_rust/Cargo.toml
+++ b/hphp/hack/src/hh_fanout/cargo/hh_fanout_dep_graph_stats_rust/Cargo.toml
@@ -16,4 +16,4 @@ depgraph_reader = { version = "0.0.0", path = "../../../depgraph/cargo/depgraph_
 env_logger = "0.7"
 json = "0.12.1"
 log = { version = "0.4.17", features = ["kv_unstable", "kv_unstable_std"] }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/naming/cargo/elaborate_namespaces/Cargo.toml b/hphp/hack/src/naming/cargo/elaborate_namespaces/Cargo.toml
index 6d98655cc39..61a6daaae47 100644
--- a/hphp/hack/src/naming/cargo/elaborate_namespaces/Cargo.toml
+++ b/hphp/hack/src/naming/cargo/elaborate_namespaces/Cargo.toml
@@ -14,5 +14,5 @@ hash = { version = "0.0.0", path = "../../../utils/hash" }
 lazy_static = "1.4"
 namespaces_rust = { version = "0.0.0", path = "../../../parser/cargo/namespaces" }
 naming_special_names_rust = { version = "0.0.0", path = "../.." }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
diff --git a/hphp/hack/src/naming/names_rust/Cargo.toml b/hphp/hack/src/naming/names_rust/Cargo.toml
index 5a208a46ea0..928361a5bf8 100644
--- a/hphp/hack/src/naming/names_rust/Cargo.toml
+++ b/hphp/hack/src/naming/names_rust/Cargo.toml
@@ -16,6 +16,8 @@ oxidized = { version = "0.0.0", path = "../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../oxidized_by_ref" }
 rand = { version = "0.8", features = ["small_rng"] }
 relative_path = { version = "0.0.0", path = "../../utils/rust/relative_path" }
-rusqlite = { version = "0.28.0", features = ["backup", "blob", "column_decltype"] }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
 typing_deps_hash = { version = "0.0.0", path = "../../deps/cargo/typing_deps_hash" }
+
+[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
+rusqlite = { version = "0.28.0", features = ["backup", "blob", "column_decltype"] }
\ No newline at end of file
diff --git a/hphp/hack/src/naming/names_rust/datatypes.rs b/hphp/hack/src/naming/names_rust/datatypes.rs
index 91106097aa3..930dfa897c5 100644
--- a/hphp/hack/src/naming/names_rust/datatypes.rs
+++ b/hphp/hack/src/naming/names_rust/datatypes.rs
@@ -11,9 +11,13 @@ use oxidized::file_info::Mode;
 use oxidized::file_info::NameType;
 use relative_path::Prefix;
 use relative_path::RelativePath;
+#[cfg(unix)]
 use rusqlite::types::FromSql;
+#[cfg(unix)]
 use rusqlite::types::FromSqlError;
+#[cfg(unix)]
 use rusqlite::types::FromSqlResult;
+#[cfg(unix)]
 use rusqlite::types::ValueRef;
 
 #[derive(Debug, Default)]
@@ -83,6 +87,7 @@ impl FileInfoId {
     }
 }
 
+#[cfg(unix)]
 impl rusqlite::ToSql for FileInfoId {
     fn to_sql(&self) -> rusqlite::Result<rusqlite::types::ToSqlOutput<'_>> {
         Ok(rusqlite::types::ToSqlOutput::from(self.0.get() as i64))
diff --git a/hphp/hack/src/naming/names_rust/naming_sqlite.rs b/hphp/hack/src/naming/names_rust/naming_sqlite.rs
index 6972660fea5..574f249d9bb 100644
--- a/hphp/hack/src/naming/names_rust/naming_sqlite.rs
+++ b/hphp/hack/src/naming/names_rust/naming_sqlite.rs
@@ -12,8 +12,11 @@ use hh24_types::ToplevelCanonSymbolHash;
 use hh24_types::ToplevelSymbolHash;
 use oxidized::file_info::NameType;
 use relative_path::RelativePath;
+#[cfg(unix)]
 use rusqlite::params;
+#[cfg(unix)]
 use rusqlite::Connection;
+#[cfg(unix)]
 use rusqlite::OptionalExtension;
 
 pub struct Names {
diff --git a/hphp/hack/src/naming/rust/naming_types/Cargo.toml b/hphp/hack/src/naming/rust/naming_types/Cargo.toml
index fd79754c98a..afc34832236 100644
--- a/hphp/hack/src/naming/rust/naming_types/Cargo.toml
+++ b/hphp/hack/src/naming/rust/naming_types/Cargo.toml
@@ -13,5 +13,5 @@ arena_deserializer = { version = "0.0.0", path = "../../../utils/arena_deseriali
 arena_trait = { version = "0.0.0", path = "../../../arena_trait" }
 eq_modulo_pos = { version = "0.0.0", path = "../../../utils/eq_modulo_pos" }
 no_pos_hash = { version = "0.0.0", path = "../../../utils/no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/ocamlrep_marshal/cargo/ocamlrep_marshal_ffi_bindings/Cargo.toml b/hphp/hack/src/ocamlrep_marshal/cargo/ocamlrep_marshal_ffi_bindings/Cargo.toml
index 51d76e563d4..42384b7e594 100644
--- a/hphp/hack/src/ocamlrep_marshal/cargo/ocamlrep_marshal_ffi_bindings/Cargo.toml
+++ b/hphp/hack/src/ocamlrep_marshal/cargo/ocamlrep_marshal_ffi_bindings/Cargo.toml
@@ -12,6 +12,6 @@ doctest = false
 crate-type = ["lib", "staticlib"]
 
 [dependencies]
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_marshal = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_marshal = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/oxidized/Cargo.toml b/hphp/hack/src/oxidized/Cargo.toml
index 5dec4921f86..e73e5caf767 100644
--- a/hphp/hack/src/oxidized/Cargo.toml
+++ b/hphp/hack/src/oxidized/Cargo.toml
@@ -20,7 +20,7 @@ hh_autoimport_rust = { version = "0.0.0", path = "../parser/cargo/hh_autoimport"
 itertools = "0.10.3"
 naming_types = { version = "0.0.0", path = "../naming/rust/naming_types" }
 no_pos_hash = { version = "0.0.0", path = "../utils/no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../parser/cargo/core_types" }
 rc_pos = { version = "0.0.0", path = "../utils/rust/pos" }
 relative_path = { version = "0.0.0", path = "../utils/rust/relative_path" }
diff --git a/hphp/hack/src/oxidized_by_ref/Cargo.toml b/hphp/hack/src/oxidized_by_ref/Cargo.toml
index 745ec6faeb1..c6fce54f054 100644
--- a/hphp/hack/src/oxidized_by_ref/Cargo.toml
+++ b/hphp/hack/src/oxidized_by_ref/Cargo.toml
@@ -19,7 +19,7 @@ eq_modulo_pos = { version = "0.0.0", path = "../utils/eq_modulo_pos" }
 hh24_types = { version = "0.0.0", path = "../utils/hh24_types" }
 hh_hash = { version = "0.0.0", path = "../utils/hh_hash" }
 no_pos_hash = { version = "0.0.0", path = "../utils/no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../oxidized" }
 relative_path = { version = "0.0.0", path = "../utils/rust/relative_path" }
 rust_to_ocaml_attr = { version = "0.0.0", path = "../rust_to_ocaml/rust_to_ocaml_attr" }
diff --git a/hphp/hack/src/oxidized_by_ref/manual/pos.rs b/hphp/hack/src/oxidized_by_ref/manual/pos.rs
index b22f1419210..cefae086977 100644
--- a/hphp/hack/src/oxidized_by_ref/manual/pos.rs
+++ b/hphp/hack/src/oxidized_by_ref/manual/pos.rs
@@ -124,7 +124,7 @@ impl<'a> Pos<'a> {
             if start_minus1 == end {
                 end = start
             }
-            (line, start, end)
+            (line as usize, start as usize, end as usize)
         }
         match self.0 {
             Small { start, end, .. } => compute(start, end),
@@ -144,7 +144,12 @@ impl<'a> Pos<'a> {
             Tiny { span, .. } => span.to_raw_span().end.line_column_beg(),
         }
         .0;
-        (line_begin, line_end, start, end)
+        (
+            line_begin as usize,
+            line_end as usize,
+            start as usize,
+            end as usize,
+        )
     }
 
     pub fn info_raw(&self) -> (usize, usize) {
@@ -153,9 +158,9 @@ impl<'a> Pos<'a> {
 
     pub fn line(&self) -> usize {
         match self.0 {
-            Small { start, .. } => start.line(),
-            Large { start, .. } => start.line(),
-            Tiny { span, .. } => span.start_line_number(),
+            Small { start, .. } => start.line() as usize,
+            Large { start, .. } => start.line() as usize,
+            Tiny { span, .. } => span.start_line_number() as usize,
         }
     }
 
@@ -167,22 +172,32 @@ impl<'a> Pos<'a> {
     ) -> &'a Self {
         let (start_line, start_bol, start_offset) = start;
         let (end_line, end_bol, end_offset) = end;
-        let start = FilePosLarge::from_lnum_bol_offset(start_line, start_bol, start_offset);
-        let end = FilePosLarge::from_lnum_bol_offset(end_line, end_bol, end_offset);
+        let start = FilePosLarge::from_lnum_bol_offset(
+            start_line as u64,
+            start_bol as u64,
+            start_offset as u64,
+        );
+        let end =
+            FilePosLarge::from_lnum_bol_offset(end_line as u64, end_bol as u64, end_offset as u64);
         Self::from_raw_span(b, file, PosSpanRaw { start, end })
     }
 
     pub fn to_start_and_end_lnum_bol_offset(
         &self,
     ) -> ((usize, usize, usize), (usize, usize, usize)) {
-        match &self.0 {
+        let (start, end) = match &self.0 {
             Small { start, end, .. } => (start.line_beg_offset(), end.line_beg_offset()),
             Large { start, end, .. } => (start.line_beg_offset(), end.line_beg_offset()),
             Tiny { span, .. } => {
                 let PosSpanRaw { start, end } = span.to_raw_span();
                 (start.line_beg_offset(), end.line_beg_offset())
             }
-        }
+        };
+
+        (
+            (start.0 as usize, start.1 as usize, start.2 as usize),
+            (end.0 as usize, end.1 as usize, end.2 as usize),
+        )
     }
 
     /// For single-line spans only.
@@ -193,11 +208,15 @@ impl<'a> Pos<'a> {
         cols: Range<usize>,
         start_offset: usize,
     ) -> &'a Self {
-        let start = FilePosLarge::from_line_column_offset(line, cols.start, start_offset);
+        let start = FilePosLarge::from_line_column_offset(
+            line as u64,
+            cols.start as u64,
+            start_offset as u64,
+        );
         let end = FilePosLarge::from_line_column_offset(
-            line,
-            cols.end,
-            start_offset + (cols.end - cols.start),
+            line as u64,
+            cols.end as u64,
+            (start_offset + (cols.end - cols.start)) as u64,
         );
         Self::from_raw_span(b, file, PosSpanRaw { start, end })
     }
@@ -294,27 +313,30 @@ impl<'a> Pos<'a> {
 
     pub fn end_offset(&self) -> usize {
         match &self.0 {
-            Small { end, .. } => end.offset(),
-            Large { end, .. } => end.offset(),
-            Tiny { span, .. } => span.end_offset(),
+            Small { end, .. } => end.offset() as usize,
+            Large { end, .. } => end.offset() as usize,
+            Tiny { span, .. } => span.end_offset() as usize,
         }
     }
 
     pub fn start_offset(&self) -> usize {
         match &self.0 {
-            Small { start, .. } => start.offset(),
-            Large { start, .. } => start.offset(),
-            Tiny { span, .. } => span.start_offset(),
+            Small { start, .. } => start.offset() as usize,
+            Large { start, .. } => start.offset() as usize,
+            Tiny { span, .. } => span.start_offset() as usize,
         }
     }
 
     pub fn to_owned(&self) -> oxidized::pos::Pos {
         let file = self.filename();
         let PosSpanRaw { start, end } = self.to_raw_span();
+
+        let start = start.line_beg_offset();
+        let end = end.line_beg_offset();
         oxidized::pos::Pos::from_lnum_bol_offset(
             ocamlrep::rc::RcOc::new(file.to_oxidized()),
-            start.line_beg_offset(),
-            end.line_beg_offset(),
+            (start.0 as usize, start.1 as usize, start.2 as usize),
+            (end.0 as usize, end.1 as usize, end.2 as usize),
         )
     }
 }
diff --git a/hphp/hack/src/parser/aast_parser.rs b/hphp/hack/src/parser/aast_parser.rs
index b589bff13eb..2a61fce99ce 100644
--- a/hphp/hack/src/parser/aast_parser.rs
+++ b/hphp/hack/src/parser/aast_parser.rs
@@ -78,11 +78,11 @@ impl<'src> AastParser {
         ns: RcOc<NamespaceEnv>,
         indexed_source_text: &'src IndexedSourceText<'src>,
     ) -> Result<ParserResult> {
-        let start_t = Instant::now();
+        //let start_t = Instant::now();
         let arena = Bump::new();
         stack_limit::reset();
         let (language, mode, tree) = Self::parse_text(&arena, env, indexed_source_text)?;
-        let parsing_t = start_t.elapsed();
+        //let parsing_t = start_t.elapsed();
         let parse_peak = stack_limit::peak();
         let mut pr = Self::from_tree_with_namespace_env(
             env,
@@ -95,8 +95,8 @@ impl<'src> AastParser {
         )?;
 
         pr.profile.parse_peak = parse_peak as u64;
-        pr.profile.parsing_t = parsing_t;
-        pr.profile.total_t = start_t.elapsed();
+        //pr.profile.parsing_t = parsing_t;
+        //pr.profile.total_t = start_t.elapsed();
         Ok(pr)
     }
 
@@ -133,7 +133,7 @@ impl<'src> AastParser {
         mode: Option<Mode>,
         tree: PositionedSyntaxTree<'src, 'arena>,
     ) -> Result<ParserResult> {
-        let lowering_t = Instant::now();
+        //let lowering_t = Instant::now();
         match language {
             Language::Hack => {}
             _ => return Err(Error::NotAHackFile()),
@@ -155,14 +155,14 @@ impl<'src> AastParser {
         );
         stack_limit::reset();
         let ret = lower(&mut lowerer_env, tree.root());
-        let (lowering_t, elaboration_t) = (lowering_t.elapsed(), Instant::now());
+        //let (lowering_t, elaboration_t) = (lowering_t.elapsed(), Instant::now());
         let lower_peak = stack_limit::peak() as u64;
         let mut ret = if env.elaborate_namespaces {
             namespaces::toplevel_elaborator::elaborate_toplevel_defs(ns, ret)
         } else {
             ret
         };
-        let (elaboration_t, error_t) = (elaboration_t.elapsed(), Instant::now());
+        //let (elaboration_t, error_t) = (elaboration_t.elapsed(), Instant::now());
         stack_limit::reset();
         let syntax_errors =
             Self::check_syntax_error(env, indexed_source_text, &tree, Some(&mut ret));
@@ -170,7 +170,7 @@ impl<'src> AastParser {
         let lowerer_parsing_errors = lowerer_env.parsing_errors().borrow().to_vec();
         let errors = lowerer_env.hh_errors().borrow().to_vec();
         let lint_errors = lowerer_env.lint_errors().borrow().to_vec();
-        let error_t = error_t.elapsed();
+        //let error_t = error_t.elapsed();
 
         Ok(ParserResult {
             file_mode: mode,
@@ -182,9 +182,9 @@ impl<'src> AastParser {
             lint_errors,
             profile: ParserProfile {
                 lower_peak,
-                lowering_t,
-                elaboration_t,
-                error_t,
+                lowering_t: std::time::Duration::new(0, 0),
+                elaboration_t: std::time::Duration::new(0, 0),
+                error_t: std::time::Duration::new(0, 0),
                 error_peak,
                 arena_bytes: arena.allocated_bytes() as u64,
                 ..Default::default()
diff --git a/hphp/hack/src/parser/api/cargo/direct_decl_parser/Cargo.toml b/hphp/hack/src/parser/api/cargo/direct_decl_parser/Cargo.toml
index ab4bfcaeeb5..06aff9446bc 100644
--- a/hphp/hack/src/parser/api/cargo/direct_decl_parser/Cargo.toml
+++ b/hphp/hack/src/parser/api/cargo/direct_decl_parser/Cargo.toml
@@ -14,7 +14,7 @@ doctest = false
 bumpalo = { version = "3.11.1", features = ["collections"] }
 direct_decl_smart_constructors = { version = "0.0.0", path = "../../../../decl/direct_decl_smart_constructors" }
 mode_parser = { version = "0.0.0", path = "../../../cargo/mode_parser" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../../oxidized_by_ref" }
 parser = { version = "0.0.0", path = "../../../core" }
diff --git a/hphp/hack/src/parser/cargo/aast_parser/Cargo.toml b/hphp/hack/src/parser/cargo/aast_parser/Cargo.toml
index 86acb03e554..3f137705cd3 100644
--- a/hphp/hack/src/parser/cargo/aast_parser/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/aast_parser/Cargo.toml
@@ -19,7 +19,7 @@ lowerer = { version = "0.0.0", path = "../../lowerer" }
 mode_parser = { version = "0.0.0", path = "../mode_parser" }
 namespaces_rust = { version = "0.0.0", path = "../namespaces" }
 naming_special_names_rust = { version = "0.0.0", path = "../../../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
 positioned_by_ref_parser = { version = "0.0.0", path = "../../api/cargo/positioned_by_ref_parser" }
diff --git a/hphp/hack/src/parser/cargo/aast_parser_ffi/Cargo.toml b/hphp/hack/src/parser/cargo/aast_parser_ffi/Cargo.toml
index 6cf76366e20..4ac1c64761b 100644
--- a/hphp/hack/src/parser/cargo/aast_parser_ffi/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/aast_parser_ffi/Cargo.toml
@@ -13,6 +13,6 @@ crate-type = ["lib", "staticlib"]
 
 [dependencies]
 aast_parser = { version = "0.0.0", path = "../aast_parser" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
diff --git a/hphp/hack/src/parser/cargo/bench/Cargo.toml b/hphp/hack/src/parser/cargo/bench/Cargo.toml
index ceafc2f0339..fc52c427ab5 100644
--- a/hphp/hack/src/parser/cargo/bench/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/bench/Cargo.toml
@@ -17,6 +17,6 @@ clap = { version = "4.1.4", features = ["derive", "env", "string", "unicode", "w
 criterion = "=0.3.1"
 cst_and_decl_parser = { version = "0.0.0", path = "../../api/cargo/cst_and_decl_parser" }
 direct_decl_parser = { version = "0.0.0", path = "../../api/cargo/direct_decl_parser" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
 relative_path = { version = "0.0.0", path = "../../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/parser/cargo/core_types/Cargo.toml b/hphp/hack/src/parser/cargo/core_types/Cargo.toml
index c4884b55cf9..82f88b5bc5b 100644
--- a/hphp/hack/src/parser/cargo/core_types/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/core_types/Cargo.toml
@@ -14,6 +14,6 @@ bumpalo = { version = "3.11.1", features = ["collections"] }
 itertools = "0.10.3"
 line_break_map = { version = "0.0.0", path = "../../../utils/line_break_map" }
 ocaml_helper = { version = "0.0.0", path = "../../../utils/ocaml_helper" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 relative_path = { version = "0.0.0", path = "../../../utils/rust/relative_path" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/parser/cargo/decl_mode_parser/Cargo.toml b/hphp/hack/src/parser/cargo/decl_mode_parser/Cargo.toml
index 56b7dfcb5a8..d33d70eb299 100644
--- a/hphp/hack/src/parser/cargo/decl_mode_parser/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/decl_mode_parser/Cargo.toml
@@ -12,7 +12,7 @@ doctest = false
 
 [dependencies]
 bumpalo = { version = "3.11.1", features = ["collections"] }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
 smart_constructors = { version = "0.0.0", path = "../smart_constructors" }
 syntax_smart_constructors = { version = "0.0.0", path = "../syntax_smart_constructors" }
diff --git a/hphp/hack/src/parser/cargo/namespaces/Cargo.toml b/hphp/hack/src/parser/cargo/namespaces/Cargo.toml
index a2f7c317b14..c6c3b82af56 100644
--- a/hphp/hack/src/parser/cargo/namespaces/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/namespaces/Cargo.toml
@@ -12,6 +12,6 @@ path = "../../namespaces.rs"
 bumpalo = { version = "3.11.1", features = ["collections"] }
 core_utils_rust = { version = "0.0.0", path = "../../../utils/core" }
 naming_special_names_rust = { version = "0.0.0", path = "../../../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../oxidized_by_ref" }
diff --git a/hphp/hack/src/parser/cargo/operator/Cargo.toml b/hphp/hack/src/parser/cargo/operator/Cargo.toml
index eb37160364d..cd4e2521bff 100644
--- a/hphp/hack/src/parser/cargo/operator/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/operator/Cargo.toml
@@ -9,5 +9,5 @@ edition = "2021"
 path = "../../operator.rs"
 
 [dependencies]
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
diff --git a/hphp/hack/src/parser/cargo/positioned_by_ref_parser_ffi/Cargo.toml b/hphp/hack/src/parser/cargo/positioned_by_ref_parser_ffi/Cargo.toml
index da5cb2e58cd..1e5ad6a3f98 100644
--- a/hphp/hack/src/parser/cargo/positioned_by_ref_parser_ffi/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/positioned_by_ref_parser_ffi/Cargo.toml
@@ -12,8 +12,8 @@ doctest = false
 crate-type = ["lib", "staticlib"]
 
 [dependencies]
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 positioned_by_ref_parser = { version = "0.0.0", path = "../../api/cargo/positioned_by_ref_parser" }
 rust_parser_ffi = { version = "0.0.0", path = "../rust_parser_ffi" }
diff --git a/hphp/hack/src/parser/cargo/rust_aast_parser_types/Cargo.toml b/hphp/hack/src/parser/cargo/rust_aast_parser_types/Cargo.toml
index 8de7496e822..f9f0fcca5b7 100644
--- a/hphp/hack/src/parser/cargo/rust_aast_parser_types/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/rust_aast_parser_types/Cargo.toml
@@ -10,6 +10,6 @@ path = "../../rust_aast_parser_types.rs"
 
 [dependencies]
 lint_rust = { version = "0.0.0", path = "../../../utils/lint" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
diff --git a/hphp/hack/src/parser/cargo/rust_parser_errors_ffi/Cargo.toml b/hphp/hack/src/parser/cargo/rust_parser_errors_ffi/Cargo.toml
index c44b3d92f0c..654509c5cbf 100644
--- a/hphp/hack/src/parser/cargo/rust_parser_errors_ffi/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/rust_parser_errors_ffi/Cargo.toml
@@ -13,8 +13,8 @@ crate-type = ["lib", "staticlib"]
 
 [dependencies]
 bumpalo = { version = "3.11.1", features = ["collections"] }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
 rust_parser_errors = { version = "0.0.0", path = "../errors" }
diff --git a/hphp/hack/src/parser/cargo/rust_parser_ffi/Cargo.toml b/hphp/hack/src/parser/cargo/rust_parser_ffi/Cargo.toml
index b927be10ce3..df9c3eaf034 100644
--- a/hphp/hack/src/parser/cargo/rust_parser_ffi/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/rust_parser_ffi/Cargo.toml
@@ -14,8 +14,8 @@ crate-type = ["lib", "staticlib"]
 [dependencies]
 bumpalo = { version = "3.11.1", features = ["collections"] }
 mode_parser = { version = "0.0.0", path = "../mode_parser" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 operator = { version = "0.0.0", path = "../operator" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
diff --git a/hphp/hack/src/parser/cargo/smart_constructors/Cargo.toml b/hphp/hack/src/parser/cargo/smart_constructors/Cargo.toml
index a22e7e351cd..bcd1ac25264 100644
--- a/hphp/hack/src/parser/cargo/smart_constructors/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/smart_constructors/Cargo.toml
@@ -9,5 +9,5 @@ edition = "2021"
 path = "../../smart_constructors.rs"
 
 [dependencies]
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
diff --git a/hphp/hack/src/parser/cargo/to_ocaml_impl/Cargo.toml b/hphp/hack/src/parser/cargo/to_ocaml_impl/Cargo.toml
index 8f1c95548a7..de135438cf1 100644
--- a/hphp/hack/src/parser/cargo/to_ocaml_impl/Cargo.toml
+++ b/hphp/hack/src/parser/cargo/to_ocaml_impl/Cargo.toml
@@ -11,6 +11,6 @@ test = false
 doctest = false
 
 [dependencies]
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../core_types" }
 stack_limit = { version = "0.0.0", path = "../../../utils/stack_limit" }
diff --git a/hphp/hack/src/parser/core/lexer.rs b/hphp/hack/src/parser/core/lexer.rs
index 8db2f3a3271..cadcc02dbbf 100644
--- a/hphp/hack/src/parser/core/lexer.rs
+++ b/hphp/hack/src/parser/core/lexer.rs
@@ -1979,7 +1979,7 @@ where
                         acc.push(t);
                         return acc;
                     }
-                    TriviaKind::FixMe | TriviaKind::IgnoreError => {
+                    TriviaKind::FixMe | TriviaKind::IgnoreError | TriviaKind::DelimitedComment => {
                         return acc;
                     }
                     _ => {
diff --git a/hphp/hack/src/parser/ffi_bridge/Cargo.toml b/hphp/hack/src/parser/ffi_bridge/Cargo.toml
index c9308b43cd8..d0cca78c48b 100644
--- a/hphp/hack/src/parser/ffi_bridge/Cargo.toml
+++ b/hphp/hack/src/parser/ffi_bridge/Cargo.toml
@@ -14,7 +14,7 @@ crate-type = ["lib", "staticlib"]
 [dependencies]
 bumpalo = { version = "3.11.1", features = ["collections"] }
 cxx = "1.0.91"
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../cargo/core_types" }
 positioned_full_trivia_parser = { version = "0.0.0", path = "../api/cargo/positioned_full_trivia_parser" }
 relative_path = { version = "0.0.0", path = "../../utils/rust/relative_path" }
diff --git a/hphp/hack/src/parser/lowerer/Cargo.toml b/hphp/hack/src/parser/lowerer/Cargo.toml
index a81124ba135..60f14265b9c 100644
--- a/hphp/hack/src/parser/lowerer/Cargo.toml
+++ b/hphp/hack/src/parser/lowerer/Cargo.toml
@@ -19,7 +19,7 @@ lazy_static = "1.4"
 lint_rust = { version = "0.0.0", path = "../../utils/lint" }
 naming_special_names_rust = { version = "0.0.0", path = "../../naming" }
 ocaml_helper = { version = "0.0.0", path = "../../utils/ocaml_helper" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../oxidized" }
 parser_core_types = { version = "0.0.0", path = "../cargo/core_types" }
 regex = "1.6.0"
diff --git a/hphp/hack/src/providers/cargo/rust_provider_backend_ffi/Cargo.toml b/hphp/hack/src/providers/cargo/rust_provider_backend_ffi/Cargo.toml
index bb0a3bbf831..e57356bd19a 100644
--- a/hphp/hack/src/providers/cargo/rust_provider_backend_ffi/Cargo.toml
+++ b/hphp/hack/src/providers/cargo/rust_provider_backend_ffi/Cargo.toml
@@ -19,9 +19,9 @@ file_info = { version = "0.0.0", path = "../../../deps/rust/file_info" }
 file_provider = { version = "0.0.0", path = "../../../hackrs/file_provider/cargo/file_provider" }
 hackrs_provider_backend = { version = "0.0.0", path = "../../hackrs_provider_backend" }
 naming_provider = { version = "0.0.0", path = "../../../hackrs/naming_provider/cargo/naming_provider" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_custom = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_custom = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../oxidized_by_ref" }
 pos = { version = "0.0.0", path = "../../../hackrs/pos/cargo/pos" }
diff --git a/hphp/hack/src/providers/hackrs_provider_backend/Cargo.toml b/hphp/hack/src/providers/hackrs_provider_backend/Cargo.toml
index e76f6f20d50..b3a957cd84d 100644
--- a/hphp/hack/src/providers/hackrs_provider_backend/Cargo.toml
+++ b/hphp/hack/src/providers/hackrs_provider_backend/Cargo.toml
@@ -22,8 +22,8 @@ hh24_types = { version = "0.0.0", path = "../../utils/hh24_types" }
 names = { version = "0.0.0", path = "../../naming/names_rust" }
 naming_provider = { version = "0.0.0", path = "../../hackrs/naming_provider/cargo/naming_provider" }
 ocaml_runtime = { version = "0.0.0", path = "../../utils/ocaml_runtime" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../oxidized_by_ref" }
 parking_lot = { version = "0.11.2", features = ["send_guard"] }
diff --git a/hphp/hack/src/shmffi/cargo/ocaml_blob/Cargo.toml b/hphp/hack/src/shmffi/cargo/ocaml_blob/Cargo.toml
index 22b9bff60cf..cf89e927391 100644
--- a/hphp/hack/src/shmffi/cargo/ocaml_blob/Cargo.toml
+++ b/hphp/hack/src/shmffi/cargo/ocaml_blob/Cargo.toml
@@ -12,7 +12,7 @@ crate-type = ["lib", "staticlib"]
 [dependencies]
 libc = "0.2.139"
 lz4 = "1.24.0"
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 shmrs = { version = "0.0.0", path = "../../../shmrs" }
 
 [dev-dependencies]
diff --git a/hphp/hack/src/shmffi/cargo/shm_store/Cargo.toml b/hphp/hack/src/shmffi/cargo/shm_store/Cargo.toml
index 0da97f63f3a..b7a1e4ab70b 100644
--- a/hphp/hack/src/shmffi/cargo/shm_store/Cargo.toml
+++ b/hphp/hack/src/shmffi/cargo/shm_store/Cargo.toml
@@ -22,8 +22,8 @@ lz4 = "1.24.0"
 md-5 = "0.10"
 measure = { version = "0.0.0", path = "../../../utils/rust/measure" }
 ocaml_blob = { version = "0.0.0", path = "../ocaml_blob" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_marshal = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_marshal = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parking_lot = { version = "0.11.2", features = ["send_guard"] }
 pos = { version = "0.0.0", path = "../../../hackrs/pos/cargo/pos" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/shmffi/cargo/shmffi/Cargo.toml b/hphp/hack/src/shmffi/cargo/shmffi/Cargo.toml
index 3616be5fe61..c4ef662bc16 100644
--- a/hphp/hack/src/shmffi/cargo/shmffi/Cargo.toml
+++ b/hphp/hack/src/shmffi/cargo/shmffi/Cargo.toml
@@ -14,7 +14,7 @@ crate-type = ["lib", "staticlib"]
 [dependencies]
 libc = "0.2.139"
 ocaml_blob = { version = "0.0.0", path = "../ocaml_blob" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 shmrs = { version = "0.0.0", path = "../../../shmrs" }
diff --git a/hphp/hack/src/typing/cargo/typing_defs_rust/Cargo.toml b/hphp/hack/src/typing/cargo/typing_defs_rust/Cargo.toml
index 026859eddd0..e394d7e6d30 100644
--- a/hphp/hack/src/typing/cargo/typing_defs_rust/Cargo.toml
+++ b/hphp/hack/src/typing/cargo/typing_defs_rust/Cargo.toml
@@ -12,7 +12,7 @@ path = "../../typing_defs_rust.rs"
 arena_trait = { version = "0.0.0", path = "../../../arena_trait" }
 bumpalo = { version = "3.11.1", features = ["collections"] }
 naming_special_names_rust = { version = "0.0.0", path = "../../../naming" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized = { version = "0.0.0", path = "../../../oxidized" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../oxidized_by_ref" }
 typing_collections_rust = { version = "0.0.0", path = "../typing_collections_rust" }
diff --git a/hphp/hack/src/typing/serialization/cargo/typing_ser_ffi/Cargo.toml b/hphp/hack/src/typing/serialization/cargo/typing_ser_ffi/Cargo.toml
index 8166128dfa7..4a321707338 100644
--- a/hphp/hack/src/typing/serialization/cargo/typing_ser_ffi/Cargo.toml
+++ b/hphp/hack/src/typing/serialization/cargo/typing_ser_ffi/Cargo.toml
@@ -17,5 +17,5 @@ bumpalo = { version = "3.11.1", features = ["collections"] }
 framing = { version = "0.0.0", path = "../../framing" }
 lazy_static = "1.4"
 lz4 = "1.24.0"
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 oxidized_by_ref = { version = "0.0.0", path = "../../../../oxidized_by_ref" }
diff --git a/hphp/hack/src/utils/config_file/rust/ffi/Cargo.toml b/hphp/hack/src/utils/config_file/rust/ffi/Cargo.toml
index 5787cd2efd1..ca124b7d331 100644
--- a/hphp/hack/src/utils/config_file/rust/ffi/Cargo.toml
+++ b/hphp/hack/src/utils/config_file/rust/ffi/Cargo.toml
@@ -13,5 +13,5 @@ crate-type = ["lib", "staticlib"]
 
 [dependencies]
 config_file = { version = "0.0.0", path = ".." }
-ocamlrep_custom = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_custom = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/utils/escaper/Cargo.toml b/hphp/hack/src/utils/escaper/Cargo.toml
index 84ed3f72ed2..0505586258f 100644
--- a/hphp/hack/src/utils/escaper/Cargo.toml
+++ b/hphp/hack/src/utils/escaper/Cargo.toml
@@ -9,7 +9,7 @@ edition = "2021"
 path = "../escaper.rs"
 
 [dependencies]
-bstr = { version = "1.0", features = ["serde", "std", "unicode"] }
+bstr = { version = "=1.2.0", features = ["serde", "std", "unicode"] }
 bumpalo = { version = "3.11.1", features = ["collections"] }
 
 [dev-dependencies]
diff --git a/hphp/hack/src/utils/hh24_types/hh24_types.rs b/hphp/hack/src/utils/hh24_types/hh24_types.rs
index 0febd35fe7d..4fd8c642cac 100644
--- a/hphp/hack/src/utils/hh24_types/hh24_types.rs
+++ b/hphp/hack/src/utils/hh24_types/hh24_types.rs
@@ -32,12 +32,14 @@ macro_rules! u64_hash_wrapper_impls {
             }
         }
 
+        #[cfg(unix)]
         impl rusqlite::ToSql for $name {
             fn to_sql(&self) -> rusqlite::Result<rusqlite::types::ToSqlOutput<'_>> {
                 Ok(rusqlite::types::ToSqlOutput::from(self.0 as i64))
             }
         }
 
+        #[cfg(unix)]
         impl rusqlite::types::FromSql for $name {
             fn column_result(
                 value: rusqlite::types::ValueRef<'_>,
diff --git a/hphp/hack/src/utils/lint/Cargo.toml b/hphp/hack/src/utils/lint/Cargo.toml
index 3ad9c34164f..af40ccfb67a 100644
--- a/hphp/hack/src/utils/lint/Cargo.toml
+++ b/hphp/hack/src/utils/lint/Cargo.toml
@@ -13,6 +13,6 @@ arena_deserializer = { version = "0.0.0", path = "../arena_deserializer" }
 arena_trait = { version = "0.0.0", path = "../../arena_trait" }
 eq_modulo_pos = { version = "0.0.0", path = "../eq_modulo_pos" }
 no_pos_hash = { version = "0.0.0", path = "../no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 rc_pos = { version = "0.0.0", path = "../rust/pos" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/utils/no_pos_hash/Cargo.toml b/hphp/hack/src/utils/no_pos_hash/Cargo.toml
index 5616b86cde6..5b1ea268f20 100644
--- a/hphp/hack/src/utils/no_pos_hash/Cargo.toml
+++ b/hphp/hack/src/utils/no_pos_hash/Cargo.toml
@@ -13,4 +13,4 @@ arena_collections = { version = "0.0.0", path = "../../arena_collections" }
 bstr = { version = "1.0", features = ["serde", "std", "unicode"] }
 fnv = "1.0"
 no_pos_hash_derive = { version = "0.0.0", path = "derive" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/utils/ocaml_runtime/Cargo.toml b/hphp/hack/src/utils/ocaml_runtime/Cargo.toml
index b87d5650c8b..4a026d5812a 100644
--- a/hphp/hack/src/utils/ocaml_runtime/Cargo.toml
+++ b/hphp/hack/src/utils/ocaml_runtime/Cargo.toml
@@ -9,4 +9,4 @@ edition = "2021"
 path = "lib.rs"
 
 [dependencies]
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/utils/rust/measure/Cargo.toml b/hphp/hack/src/utils/rust/measure/Cargo.toml
index 9a4c3e72538..3e18994237f 100644
--- a/hphp/hack/src/utils/rust/measure/Cargo.toml
+++ b/hphp/hack/src/utils/rust/measure/Cargo.toml
@@ -10,6 +10,6 @@ path = "measure.rs"
 
 [dependencies]
 hash = { version = "0.0.0", path = "../../hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 once_cell = "1.12"
 parking_lot = { version = "0.11.2", features = ["send_guard"] }
diff --git a/hphp/hack/src/utils/rust/measure/ffi/Cargo.toml b/hphp/hack/src/utils/rust/measure/ffi/Cargo.toml
index 70e9756516d..a3ac96e6ad7 100644
--- a/hphp/hack/src/utils/rust/measure/ffi/Cargo.toml
+++ b/hphp/hack/src/utils/rust/measure/ffi/Cargo.toml
@@ -13,4 +13,4 @@ crate-type = ["lib", "staticlib"]
 
 [dependencies]
 measure = { version = "0.0.0", path = ".." }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
diff --git a/hphp/hack/src/utils/rust/pos/Cargo.toml b/hphp/hack/src/utils/rust/pos/Cargo.toml
index 3da695d59ee..5000261d32f 100644
--- a/hphp/hack/src/utils/rust/pos/Cargo.toml
+++ b/hphp/hack/src/utils/rust/pos/Cargo.toml
@@ -13,7 +13,7 @@ arena_deserializer = { version = "0.0.0", path = "../../arena_deserializer" }
 arena_trait = { version = "0.0.0", path = "../../../arena_trait" }
 eq_modulo_pos = { version = "0.0.0", path = "../../eq_modulo_pos" }
 no_pos_hash = { version = "0.0.0", path = "../../no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 parser_core_types = { version = "0.0.0", path = "../../../parser/cargo/core_types" }
 relative_path = { version = "0.0.0", path = "../relative_path" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
diff --git a/hphp/hack/src/utils/rust/pos/file_pos.rs b/hphp/hack/src/utils/rust/pos/file_pos.rs
index fff34e9c159..49ae1121f9c 100644
--- a/hphp/hack/src/utils/rust/pos/file_pos.rs
+++ b/hphp/hack/src/utils/rust/pos/file_pos.rs
@@ -4,6 +4,6 @@
 // LICENSE file in the "hack" directory of this source tree.
 
 pub trait FilePos {
-    fn offset(&self) -> usize;
-    fn line_column_beg(&self) -> (usize, usize, usize);
+    fn offset(&self) -> u64;
+    fn line_column_beg(&self) -> (u64, u64, u64);
 }
diff --git a/hphp/hack/src/utils/rust/pos/file_pos_large.rs b/hphp/hack/src/utils/rust/pos/file_pos_large.rs
index f59e0a024cc..a1929b265f5 100644
--- a/hphp/hack/src/utils/rust/pos/file_pos_large.rs
+++ b/hphp/hack/src/utils/rust/pos/file_pos_large.rs
@@ -15,13 +15,13 @@ use crate::file_pos_small::FilePosSmall;
 #[derive(Copy, Clone, Debug, Deserialize, Eq, Hash, PartialEq, Serialize)]
 pub struct FilePosLarge {
     /// line number. Starts at 1.
-    lnum: usize,
+    lnum: u64,
     /// character number of the beginning of line of this position.
     /// The column number is therefore offset - bol
     /// Starts at 0
-    bol: usize,
+    bol: u64,
     /// character offset from the beginning of the file. Starts at 0.
-    offset: usize,
+    offset: u64,
 }
 arena_deserializer::impl_deserialize_in_arena!(FilePosLarge);
 
@@ -30,7 +30,7 @@ impl arena_trait::TrivialDrop for FilePosLarge {}
 const DUMMY: FilePosLarge = FilePosLarge {
     lnum: 0,
     bol: 0,
-    offset: usize::max_value(),
+    offset: u64::max_value(),
 };
 
 impl FilePosLarge {
@@ -56,7 +56,7 @@ impl FilePosLarge {
     // constructors
 
     #[inline]
-    pub const fn from_line_column_offset(line: usize, column: usize, offset: usize) -> Self {
+    pub const fn from_line_column_offset(line: u64, column: u64, offset: u64) -> Self {
         FilePosLarge {
             lnum: line,
             bol: offset - column,
@@ -65,29 +65,29 @@ impl FilePosLarge {
     }
 
     #[inline]
-    pub const fn from_lnum_bol_offset(lnum: usize, bol: usize, offset: usize) -> Self {
+    pub const fn from_lnum_bol_offset(lnum: u64, bol: u64, offset: u64) -> Self {
         FilePosLarge { lnum, bol, offset }
     }
 
     // accessors
 
     #[inline]
-    pub const fn line(self) -> usize {
+    pub const fn line(self) -> u64 {
         self.lnum
     }
 
     #[inline]
-    pub const fn column(self) -> usize {
+    pub fn column(self) -> u64 {
         self.offset - self.bol
     }
 
     #[inline]
-    pub const fn beg_of_line(self) -> usize {
+    pub const fn beg_of_line(self) -> u64 {
         self.bol
     }
 
     #[inline]
-    pub const fn with_column(self, col: usize) -> Self {
+    pub const fn with_column(self, col: u64) -> Self {
         FilePosLarge {
             lnum: self.lnum,
             bol: self.bol,
@@ -96,34 +96,34 @@ impl FilePosLarge {
     }
 
     #[inline]
-    pub const fn line_beg(self) -> (usize, usize) {
+    pub const fn line_beg(self) -> (u64, u64) {
         (self.lnum, self.bol)
     }
 
     #[inline]
-    pub const fn line_column(self) -> (usize, usize) {
+    pub const fn line_column(self) -> (u64, u64) {
         (self.lnum, self.offset - self.bol)
     }
 
     #[inline]
-    pub const fn line_column_offset(self) -> (usize, usize, usize) {
+    pub const fn line_column_offset(self) -> (u64, u64, u64) {
         (self.lnum, self.offset - self.bol, self.offset)
     }
 
     #[inline]
-    pub const fn line_beg_offset(self) -> (usize, usize, usize) {
+    pub const fn line_beg_offset(self) -> (u64, u64, u64) {
         (self.lnum, self.bol, self.offset)
     }
 }
 
 impl FilePos for FilePosLarge {
     #[inline]
-    fn offset(&self) -> usize {
+    fn offset(&self) -> u64 {
         self.offset
     }
 
     #[inline]
-    fn line_column_beg(&self) -> (usize, usize, usize) {
+    fn line_column_beg(&self) -> (u64, u64, u64) {
         (self.lnum, self.offset - self.bol, self.bol)
     }
 }
@@ -166,7 +166,7 @@ impl FromOcamlRep for FilePosLarge {
         Ok(Self {
             lnum,
             bol,
-            offset: offset as usize,
+            offset: offset as u64,
         })
     }
 }
diff --git a/hphp/hack/src/utils/rust/pos/file_pos_small.rs b/hphp/hack/src/utils/rust/pos/file_pos_small.rs
index ce3bd4e0172..66579bfceab 100644
--- a/hphp/hack/src/utils/rust/pos/file_pos_small.rs
+++ b/hphp/hack/src/utils/rust/pos/file_pos_small.rs
@@ -38,23 +38,23 @@ arena_deserializer::impl_deserialize_in_arena!(FilePosSmall);
 
 impl arena_trait::TrivialDrop for FilePosSmall {}
 
-const COLUMN_BITS: usize = 9;
-const LINE_BITS: usize = 24;
-const BOL_BITS: usize = 30;
+const COLUMN_BITS: u64 = 9;
+const LINE_BITS: u64 = 24;
+const BOL_BITS: u64 = 30;
 
 #[inline]
-const fn mask(bits: usize) -> usize {
+const fn mask(bits: u64) -> u64 {
     (1 << bits) - 1
 }
 
 #[inline]
-const fn mask_by(bits: usize, x: u64) -> usize {
-    (x & (mask(bits) as u64)) as usize
+const fn mask_by(bits: u64, x: u64) -> u64 {
+    x & mask(bits)
 }
 
-const MAX_COLUMN: usize = mask(COLUMN_BITS);
-const MAX_LINE: usize = mask(LINE_BITS);
-const MAX_BOL: usize = mask(BOL_BITS);
+const MAX_COLUMN: u64 = mask(COLUMN_BITS);
+const MAX_LINE: u64 = mask(LINE_BITS);
+const MAX_BOL: u64 = mask(BOL_BITS);
 
 const DUMMY: u64 = u64::max_value();
 
@@ -70,7 +70,7 @@ impl FilePosSmall {
     }
 
     #[inline]
-    pub fn beg_of_line(self) -> usize {
+    pub fn beg_of_line(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
@@ -79,7 +79,7 @@ impl FilePosSmall {
     }
 
     #[inline]
-    pub fn line(self) -> usize {
+    pub fn line(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
@@ -88,25 +88,25 @@ impl FilePosSmall {
     }
 
     #[inline]
-    pub fn column(self) -> usize {
+    pub fn column(self) -> u64 {
         if self.is_dummy() {
-            DUMMY as usize
+            DUMMY
         } else {
             mask_by(COLUMN_BITS, self.0)
         }
     }
 
     #[inline]
-    const fn bol_line_col_unchecked(bol: usize, line: usize, col: usize) -> Self {
+    const fn bol_line_col_unchecked(bol: u64, line: u64, col: u64) -> Self {
         FilePosSmall(
-            ((bol as u64) << (COLUMN_BITS + LINE_BITS))
-                + ((line as u64) << COLUMN_BITS)
-                + (col as u64),
+            (bol << (COLUMN_BITS + LINE_BITS))
+                + (line << COLUMN_BITS)
+                + col,
         )
     }
 
     #[inline]
-    fn bol_line_col(bol: usize, line: usize, col: usize) -> Option<Self> {
+    fn bol_line_col(bol: u64, line: u64, col: u64) -> Option<Self> {
         if col > MAX_COLUMN || line > MAX_LINE || bol > MAX_BOL {
             None
         } else {
@@ -122,39 +122,39 @@ impl FilePosSmall {
     // constructors
 
     #[inline]
-    pub fn from_line_column_offset(line: usize, column: usize, offset: usize) -> Option<Self> {
+    pub fn from_line_column_offset(line: u64, column: u64, offset: u64) -> Option<Self> {
         Self::bol_line_col(offset - column, line, column)
     }
 
     #[inline]
-    pub fn from_lnum_bol_offset(lnum: usize, bol: usize, offset: usize) -> Option<Self> {
+    pub fn from_lnum_bol_offset(lnum: u64, bol: u64, offset: u64) -> Option<Self> {
         Self::bol_line_col(bol, lnum, offset - bol)
     }
 
     // accessors
 
     #[inline]
-    pub fn line_beg(self) -> (usize, usize) {
+    pub fn line_beg(self) -> (u64, u64) {
         (self.line(), self.beg_of_line())
     }
 
     #[inline]
-    pub fn line_column(self) -> (usize, usize) {
+    pub fn line_column(self) -> (u64, u64) {
         (self.line(), self.column())
     }
 
     #[inline]
-    pub fn line_column_offset(self) -> (usize, usize, usize) {
+    pub fn line_column_offset(self) -> (u64, u64, u64) {
         (self.line(), self.column(), self.offset())
     }
 
     #[inline]
-    pub fn line_beg_offset(self) -> (usize, usize, usize) {
+    pub fn line_beg_offset(self) -> (u64, u64, u64) {
         (self.line(), self.beg_of_line(), self.offset())
     }
 
     #[inline]
-    pub fn with_column(self, col: usize) -> Self {
+    pub fn with_column(self, col: u64) -> Self {
         match Self::bol_line_col(self.beg_of_line(), self.line(), col) {
             None => FilePosSmall(DUMMY),
             Some(pos) => pos,
@@ -164,12 +164,12 @@ impl FilePosSmall {
 
 impl FilePos for FilePosSmall {
     #[inline]
-    fn offset(&self) -> usize {
+    fn offset(&self) -> u64 {
         self.beg_of_line() + self.column()
     }
 
     #[inline]
-    fn line_column_beg(&self) -> (usize, usize, usize) {
+    fn line_column_beg(&self) -> (u64, u64, u64) {
         (self.line(), self.column(), self.beg_of_line())
     }
 }
diff --git a/hphp/hack/src/utils/rust/pos/pos_impl.rs b/hphp/hack/src/utils/rust/pos/pos_impl.rs
index 4d7d570596d..9f22843e02b 100644
--- a/hphp/hack/src/utils/rust/pos/pos_impl.rs
+++ b/hphp/hack/src/utils/rust/pos/pos_impl.rs
@@ -25,16 +25,7 @@ use crate::file_pos_small::FilePosSmall;
 use crate::pos_span_raw::PosSpanRaw;
 use crate::pos_span_tiny::PosSpanTiny;
 
-#[derive(
-    Clone,
-    Debug,
-    Deserialize,
-    Hash,
-    FromOcamlRep,
-    FromOcamlRepIn,
-    ToOcamlRep,
-    Serialize
-)]
+#[derive(Clone, Debug, Deserialize, Hash, FromOcamlRep, FromOcamlRepIn, ToOcamlRep, Serialize)]
 enum PosImpl {
     Small {
         file: RcOc<RelativePath>,
@@ -53,15 +44,7 @@ enum PosImpl {
     FromReason(Box<PosImpl>),
 }
 
-#[derive(
-    Clone,
-    Debug,
-    Deserialize,
-    FromOcamlRep,
-    FromOcamlRepIn,
-    ToOcamlRep,
-    Serialize
-)]
+#[derive(Clone, Debug, Deserialize, FromOcamlRep, FromOcamlRepIn, ToOcamlRep, Serialize)]
 pub struct Pos(PosImpl);
 
 pub type PosR<'a> = &'a Pos;
@@ -157,7 +140,7 @@ impl Pos {
             if end == start_minus1 {
                 end = start
             }
-            (line, start, end)
+            (line as usize, start as usize, end as usize)
         }
         match &self.0 {
             PosImpl::Small { start, end, .. } => compute(start, end),
@@ -179,7 +162,7 @@ impl Pos {
             PosImpl::FromReason(_p) => unimplemented!(),
         }
         .0;
-        (line_begin, line_end, start, end)
+        (line_begin, line_end as usize, start, end)
     }
 
     pub fn info_raw(&self) -> (usize, usize) {
@@ -188,9 +171,9 @@ impl Pos {
 
     pub fn line(&self) -> usize {
         match &self.0 {
-            PosImpl::Small { start, .. } => start.line(),
-            PosImpl::Large { start, .. } => start.line(),
-            PosImpl::Tiny { span, .. } => span.start_line_number(),
+            PosImpl::Small { start, .. } => start.line() as usize,
+            PosImpl::Large { start, .. } => start.line() as usize,
+            PosImpl::Tiny { span, .. } => span.start_line_number() as usize,
             PosImpl::FromReason(_p) => unimplemented!(),
         }
     }
@@ -202,15 +185,23 @@ impl Pos {
     ) -> Self {
         let (start_line, start_bol, start_offset) = start;
         let (end_line, end_bol, end_offset) = end;
-        let start = FilePosLarge::from_lnum_bol_offset(start_line, start_bol, start_offset);
-        let end = FilePosLarge::from_lnum_bol_offset(end_line, end_bol, end_offset);
+        let start = FilePosLarge::from_lnum_bol_offset(
+            start_line as u64,
+            start_bol as u64,
+            start_offset as u64,
+        );
+        let end = FilePosLarge::from_lnum_bol_offset(
+            end_line as u64,
+            end_bol as u64,
+            end_offset as u64,
+        );
         Self::from_raw_span(file, PosSpanRaw { start, end })
     }
 
     pub fn to_start_and_end_lnum_bol_offset(
         &self,
     ) -> ((usize, usize, usize), (usize, usize, usize)) {
-        match &self.0 {
+        let (start, end) = match &self.0 {
             PosImpl::Small { start, end, .. } => (start.line_beg_offset(), end.line_beg_offset()),
             PosImpl::Large { start, end, .. } => (start.line_beg_offset(), end.line_beg_offset()),
             PosImpl::Tiny { span, .. } => {
@@ -218,7 +209,12 @@ impl Pos {
                 (start.line_beg_offset(), end.line_beg_offset())
             }
             PosImpl::FromReason(_p) => unimplemented!(),
-        }
+        };
+
+        (
+            (start.0 as usize, start.1 as usize, start.2 as usize),
+            (end.0 as usize, end.1 as usize, end.2 as usize),
+        )
     }
 
     /// For single-line spans only.
@@ -228,11 +224,15 @@ impl Pos {
         cols: Range<usize>,
         start_offset: usize,
     ) -> Self {
-        let start = FilePosLarge::from_line_column_offset(line, cols.start, start_offset);
+        let start = FilePosLarge::from_line_column_offset(
+            line as u64,
+            cols.start as u64,
+            start_offset as u64,
+        );
         let end = FilePosLarge::from_line_column_offset(
-            line,
-            cols.end,
-            start_offset + (cols.end - cols.start),
+            line as u64,
+            cols.end as u64,
+            (start_offset + (cols.end - cols.start)) as u64,
         );
         Self::from_raw_span(file, PosSpanRaw { start, end })
     }
@@ -321,18 +321,18 @@ impl Pos {
 
     pub fn end_offset(&self) -> usize {
         match &self.0 {
-            PosImpl::Small { end, .. } => end.offset(),
-            PosImpl::Large { end, .. } => end.offset(),
-            PosImpl::Tiny { span, .. } => span.end_offset(),
+            PosImpl::Small { end, .. } => end.offset() as usize,
+            PosImpl::Large { end, .. } => end.offset() as usize,
+            PosImpl::Tiny { span, .. } => span.end_offset() as usize,
             PosImpl::FromReason(_p) => unimplemented!(),
         }
     }
 
     pub fn start_offset(&self) -> usize {
         match &self.0 {
-            PosImpl::Small { start, .. } => start.offset(),
-            PosImpl::Large { start, .. } => start.offset(),
-            PosImpl::Tiny { span, .. } => span.start_offset(),
+            PosImpl::Small { start, .. } => start.offset() as usize,
+            PosImpl::Large { start, .. } => start.offset() as usize,
+            PosImpl::Tiny { span, .. } => span.start_offset() as usize,
             PosImpl::FromReason(_p) => unimplemented!(),
         }
     }
@@ -478,22 +478,18 @@ mod tests {
     #[test]
     fn test_pos() {
         assert!(Pos::make_none().is_none());
-        assert!(
-            !Pos::from_lnum_bol_offset(
-                RcOc::new(RelativePath::make(Prefix::Dummy, PathBuf::from("a"))),
-                (0, 0, 0),
-                (0, 0, 0)
-            )
-            .is_none(),
-        );
-        assert!(
-            !Pos::from_lnum_bol_offset(
-                RcOc::new(RelativePath::make(Prefix::Dummy, PathBuf::from(""))),
-                (1, 0, 0),
-                (0, 0, 0)
-            )
-            .is_none(),
-        );
+        assert!(!Pos::from_lnum_bol_offset(
+            RcOc::new(RelativePath::make(Prefix::Dummy, PathBuf::from("a"))),
+            (0, 0, 0),
+            (0, 0, 0)
+        )
+        .is_none(),);
+        assert!(!Pos::from_lnum_bol_offset(
+            RcOc::new(RelativePath::make(Prefix::Dummy, PathBuf::from(""))),
+            (1, 0, 0),
+            (0, 0, 0)
+        )
+        .is_none(),);
     }
 
     #[test]
diff --git a/hphp/hack/src/utils/rust/pos/pos_span_tiny.rs b/hphp/hack/src/utils/rust/pos/pos_span_tiny.rs
index dc31a9504bf..6a492ad3c3e 100644
--- a/hphp/hack/src/utils/rust/pos/pos_span_tiny.rs
+++ b/hphp/hack/src/utils/rust/pos/pos_span_tiny.rs
@@ -130,83 +130,83 @@ impl PosSpanTiny {
         ))
     }
 
-    pub fn start_beginning_of_line(self) -> usize {
+    pub fn start_beginning_of_line(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
             mask_by(
                 START_BEGINNING_OF_LINE_BITS,
                 self.0 >> START_BEGINNING_OF_LINE_OFFSET,
-            ) as usize
+            )
         }
     }
 
-    pub fn start_line_number(self) -> usize {
+    pub fn start_line_number(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
-            mask_by(START_LINE_NUMBER_BITS, self.0 >> START_LINE_NUMBER_OFFSET) as usize
+            mask_by(START_LINE_NUMBER_BITS, self.0 >> START_LINE_NUMBER_OFFSET)
         }
     }
 
-    pub fn start_column(self) -> usize {
+    pub fn start_column(self) -> u64 {
         if self.is_dummy() {
-            usize::MAX
+            u64::MAX
         } else {
             mask_by(
                 START_COLUMN_NUMBER_BITS,
                 self.0 >> START_COLUMN_NUMBER_OFFSET,
-            ) as usize
+            )
         }
     }
 
-    fn beginning_of_line_increment(self) -> usize {
+    fn beginning_of_line_increment(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
             mask_by(
                 BEGINNING_OF_LINE_INCREMENT_BITS,
                 self.0 >> BEGINNING_OF_LINE_INCREMENT_OFFSET,
-            ) as usize
+            )
         }
     }
 
-    fn line_number_increment(self) -> usize {
+    fn line_number_increment(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
             mask_by(
                 LINE_NUMBER_INCREMENT_BITS,
                 self.0 >> LINE_NUMBER_INCREMENT_OFFSET,
-            ) as usize
+            )
         }
     }
 
-    fn width(self) -> usize {
+    fn width(self) -> u64 {
         if self.is_dummy() {
             0
         } else {
-            mask_by(WIDTH_BITS, self.0 >> WIDTH_OFFSET) as usize
+            mask_by(WIDTH_BITS, self.0 >> WIDTH_OFFSET)
         }
     }
 
-    pub fn start_offset(self) -> usize {
+    pub fn start_offset(self) -> u64 {
         self.start_beginning_of_line() + self.start_column()
     }
 
-    pub fn end_line_number(self) -> usize {
+    pub fn end_line_number(self) -> u64 {
         self.start_line_number() + self.line_number_increment()
     }
 
-    pub fn end_beginning_of_line(self) -> usize {
+    pub fn end_beginning_of_line(self) -> u64 {
         self.start_beginning_of_line() + self.beginning_of_line_increment()
     }
 
-    pub fn end_offset(self) -> usize {
+    pub fn end_offset(self) -> u64 {
         self.start_offset() + self.width()
     }
 
-    pub fn end_column(self) -> usize {
+    pub fn end_column(self) -> u64 {
         self.end_offset() - self.end_beginning_of_line()
     }
 
@@ -221,8 +221,16 @@ impl PosSpanTiny {
             let end_bol = self.end_beginning_of_line();
             let end_offset = self.end_offset();
             PosSpanRaw {
-                start: FilePosLarge::from_lnum_bol_offset(start_lnum, start_bol, start_offset),
-                end: FilePosLarge::from_lnum_bol_offset(end_lnum, end_bol, end_offset),
+                start: FilePosLarge::from_lnum_bol_offset(
+                    start_lnum as u64,
+                    start_bol as u64,
+                    start_offset as u64,
+                ),
+                end: FilePosLarge::from_lnum_bol_offset(
+                    end_lnum as u64,
+                    end_bol as u64,
+                    end_offset as u64,
+                ),
             }
         }
     }
diff --git a/hphp/hack/src/utils/rust/relative_path/Cargo.toml b/hphp/hack/src/utils/rust/relative_path/Cargo.toml
index 93abb7d6f2d..649fdc6e67c 100644
--- a/hphp/hack/src/utils/rust/relative_path/Cargo.toml
+++ b/hphp/hack/src/utils/rust/relative_path/Cargo.toml
@@ -12,7 +12,7 @@ path = "../relative_path.rs"
 arena_trait = { version = "0.0.0", path = "../../../arena_trait" }
 eq_modulo_pos = { version = "0.0.0", path = "../../eq_modulo_pos" }
 no_pos_hash = { version = "0.0.0", path = "../../no_pos_hash" }
-ocamlrep = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
 serde = { version = "1.0.136", features = ["derive", "rc"] }
 
 [dev-dependencies]
diff --git a/hphp/hack/src/utils/test/Cargo.toml b/hphp/hack/src/utils/test/Cargo.toml
index 2d03a1300ba..f198893e7bd 100644
--- a/hphp/hack/src/utils/test/Cargo.toml
+++ b/hphp/hack/src/utils/test/Cargo.toml
@@ -12,4 +12,4 @@ doctest = false
 
 [dependencies]
 line_break_map = { version = "0.0.0", path = "../line_break_map" }
-ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/facebook/ocamlrep/", branch = "main" }
+ocamlrep_ocamlpool = { version = "0.1.0", git = "https://github.com/muglug/ocamlrep/", branch = "main" }
